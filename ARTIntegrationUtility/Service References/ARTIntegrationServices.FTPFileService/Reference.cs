//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ART.Integration.Utility.ARTIntegrationServices.FTPFileService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ARTIntegrationServices.FTPFileService.IFTPFileService")]
    public interface IFTPFileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/CreateFolder", ReplyAction="http://tempuri.org/IFTPFileService/CreateFolderResponse")]
        bool CreateFolder(string loginID, string folderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/CreateFolder", ReplyAction="http://tempuri.org/IFTPFileService/CreateFolderResponse")]
        System.Threading.Tasks.Task<bool> CreateFolderAsync(string loginID, string folderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/RemoveFolder", ReplyAction="http://tempuri.org/IFTPFileService/RemoveFolderResponse")]
        bool RemoveFolder(string loginID, string folderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/RemoveFolder", ReplyAction="http://tempuri.org/IFTPFileService/RemoveFolderResponse")]
        System.Threading.Tasks.Task<bool> RemoveFolderAsync(string loginID, string folderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/RemoveUserFolders", ReplyAction="http://tempuri.org/IFTPFileService/RemoveUserFoldersResponse")]
        bool RemoveUserFolders(string loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/RemoveUserFolders", ReplyAction="http://tempuri.org/IFTPFileService/RemoveUserFoldersResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserFoldersAsync(string loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/GetFirstFile", ReplyAction="http://tempuri.org/IFTPFileService/GetFirstFileResponse")]
        string GetFirstFile(string loginID, string folderName, string extFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/GetFirstFile", ReplyAction="http://tempuri.org/IFTPFileService/GetFirstFileResponse")]
        System.Threading.Tasks.Task<string> GetFirstFileAsync(string loginID, string folderName, string extFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/GetFileStream", ReplyAction="http://tempuri.org/IFTPFileService/GetFileStreamResponse")]
        System.IO.Stream GetFileStream(string loginID, string folderName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/GetFileStream", ReplyAction="http://tempuri.org/IFTPFileService/GetFileStreamResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetFileStreamAsync(string loginID, string folderName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/DeleteFile", ReplyAction="http://tempuri.org/IFTPFileService/DeleteFileResponse")]
        bool DeleteFile(string loginID, string folderName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPFileService/DeleteFile", ReplyAction="http://tempuri.org/IFTPFileService/DeleteFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileAsync(string loginID, string folderName, string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFTPFileServiceChannel : ART.Integration.Utility.ARTIntegrationServices.FTPFileService.IFTPFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FTPFileServiceClient : System.ServiceModel.ClientBase<ART.Integration.Utility.ARTIntegrationServices.FTPFileService.IFTPFileService>, ART.Integration.Utility.ARTIntegrationServices.FTPFileService.IFTPFileService {
        
        public FTPFileServiceClient() {
        }
        
        public FTPFileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FTPFileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FTPFileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FTPFileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateFolder(string loginID, string folderName) {
            return base.Channel.CreateFolder(loginID, folderName);
        }
        
        public System.Threading.Tasks.Task<bool> CreateFolderAsync(string loginID, string folderName) {
            return base.Channel.CreateFolderAsync(loginID, folderName);
        }
        
        public bool RemoveFolder(string loginID, string folderName) {
            return base.Channel.RemoveFolder(loginID, folderName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFolderAsync(string loginID, string folderName) {
            return base.Channel.RemoveFolderAsync(loginID, folderName);
        }
        
        public bool RemoveUserFolders(string loginID) {
            return base.Channel.RemoveUserFolders(loginID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserFoldersAsync(string loginID) {
            return base.Channel.RemoveUserFoldersAsync(loginID);
        }
        
        public string GetFirstFile(string loginID, string folderName, string extFilter) {
            return base.Channel.GetFirstFile(loginID, folderName, extFilter);
        }
        
        public System.Threading.Tasks.Task<string> GetFirstFileAsync(string loginID, string folderName, string extFilter) {
            return base.Channel.GetFirstFileAsync(loginID, folderName, extFilter);
        }
        
        public System.IO.Stream GetFileStream(string loginID, string folderName, string fileName) {
            return base.Channel.GetFileStream(loginID, folderName, fileName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetFileStreamAsync(string loginID, string folderName, string fileName) {
            return base.Channel.GetFileStreamAsync(loginID, folderName, fileName);
        }
        
        public bool DeleteFile(string loginID, string folderName, string fileName) {
            return base.Channel.DeleteFile(loginID, folderName, fileName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFileAsync(string loginID, string folderName, string fileName) {
            return base.Channel.DeleteFileAsync(loginID, folderName, fileName);
        }
    }
}

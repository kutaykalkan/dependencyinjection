//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ART.Integration.Utility.ARTIntegrationServices.FTPUserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ARTIntegrationServices.FTPUserService.IFTPUserService")]
    public interface IFTPUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/IsUserExists", ReplyAction="http://tempuri.org/IFTPUserService/IsUserExistsResponse")]
        bool IsUserExists(string loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/IsUserExists", ReplyAction="http://tempuri.org/IFTPUserService/IsUserExistsResponse")]
        System.Threading.Tasks.Task<bool> IsUserExistsAsync(string loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/CreateUser", ReplyAction="http://tempuri.org/IFTPUserService/CreateUserResponse")]
        bool CreateUser(string loginID, string password, bool isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/CreateUser", ReplyAction="http://tempuri.org/IFTPUserService/CreateUserResponse")]
        System.Threading.Tasks.Task<bool> CreateUserAsync(string loginID, string password, bool isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/RemoveUser", ReplyAction="http://tempuri.org/IFTPUserService/RemoveUserResponse")]
        bool RemoveUser(string loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/RemoveUser", ReplyAction="http://tempuri.org/IFTPUserService/RemoveUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserAsync(string loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/EnableDisableUser", ReplyAction="http://tempuri.org/IFTPUserService/EnableDisableUserResponse")]
        bool EnableDisableUser(string loginID, bool isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/EnableDisableUser", ReplyAction="http://tempuri.org/IFTPUserService/EnableDisableUserResponse")]
        System.Threading.Tasks.Task<bool> EnableDisableUserAsync(string loginID, bool isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/ChangePassword", ReplyAction="http://tempuri.org/IFTPUserService/ChangePasswordResponse")]
        bool ChangePassword(string loginID, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/ChangePassword", ReplyAction="http://tempuri.org/IFTPUserService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string loginID, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/ResetPassword", ReplyAction="http://tempuri.org/IFTPUserService/ResetPasswordResponse")]
        bool ResetPassword(string loginID, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFTPUserService/ResetPassword", ReplyAction="http://tempuri.org/IFTPUserService/ResetPasswordResponse")]
        System.Threading.Tasks.Task<bool> ResetPasswordAsync(string loginID, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFTPUserServiceChannel : ART.Integration.Utility.ARTIntegrationServices.FTPUserService.IFTPUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FTPUserServiceClient : System.ServiceModel.ClientBase<ART.Integration.Utility.ARTIntegrationServices.FTPUserService.IFTPUserService>, ART.Integration.Utility.ARTIntegrationServices.FTPUserService.IFTPUserService {
        
        public FTPUserServiceClient() {
        }
        
        public FTPUserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FTPUserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FTPUserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FTPUserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsUserExists(string loginID) {
            return base.Channel.IsUserExists(loginID);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserExistsAsync(string loginID) {
            return base.Channel.IsUserExistsAsync(loginID);
        }
        
        public bool CreateUser(string loginID, string password, bool isEnabled) {
            return base.Channel.CreateUser(loginID, password, isEnabled);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserAsync(string loginID, string password, bool isEnabled) {
            return base.Channel.CreateUserAsync(loginID, password, isEnabled);
        }
        
        public bool RemoveUser(string loginID) {
            return base.Channel.RemoveUser(loginID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserAsync(string loginID) {
            return base.Channel.RemoveUserAsync(loginID);
        }
        
        public bool EnableDisableUser(string loginID, bool isEnabled) {
            return base.Channel.EnableDisableUser(loginID, isEnabled);
        }
        
        public System.Threading.Tasks.Task<bool> EnableDisableUserAsync(string loginID, bool isEnabled) {
            return base.Channel.EnableDisableUserAsync(loginID, isEnabled);
        }
        
        public bool ChangePassword(string loginID, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(loginID, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string loginID, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(loginID, oldPassword, newPassword);
        }
        
        public bool ResetPassword(string loginID, string password) {
            return base.Channel.ResetPassword(loginID, password);
        }
        
        public System.Threading.Tasks.Task<bool> ResetPasswordAsync(string loginID, string password) {
            return base.Channel.ResetPasswordAsync(loginID, password);
        }
    }
}

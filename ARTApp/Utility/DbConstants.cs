
/******************************************
 * Auto-generated by Adapdev Codus v1.4.0 - Trial Use Only
 * 
 ******************************************/
using System;
using System.Configuration;
using Adapdev.Data;
using SkyStem.ART.App.Utility;
using SkyStem.ART.App.Data;
using SkyStem.ART.Client.Model.CompanyDatabase;

namespace SkyStem.ART
{

    public class DbConstants
    {

        public static readonly Adapdev.Data.DbProviderType DatabaseProviderType = Adapdev.Data.DbProviderType.SQLSERVER;
        public static readonly Adapdev.Data.DbType DatabaseType = Adapdev.Data.DbType.SQLSERVER;

        public static string ConnectionString
        {
            get
            {
                return AppSettingHelper.GetAppSettingValue(ConnectionStringConstants.CONNECTION_STRING_SKYSTEMART);
            }
        }

        public static string ConnectionStringCreateCompany
        {
            get
            {
                return AppSettingHelper.GetAppSettingValue(ConnectionStringConstants.CONNECTION_STRING_SKYSTEMART_CREATE_COMPANY);
            }
        }

        public static string ConnectionStringCore
        {
            get
            {
                return AppSettingHelper.GetAppSettingValue(ConnectionStringConstants.CONNECTION_STRING_SKYSTEMART_CORE);
            }
        }

        public static string ConnectionStringSpecific
        {
            get
            {
                return AppSettingHelper.GetAppSettingValue(ConnectionStringConstants.CONNECTION_STRING_SKYSTEMART_SPECIFIC);
            }
        }

        public static int? CommandTimeOut
        {
            get
            {
                int _timeout;
                int? _nullableTimeOut = null;

                string _commandTimeOut = AppSettingHelper.GetAppSettingValue(AppSettingConstants.DB_COMMAND_TIMEOUT);
                if (Int32.TryParse(_commandTimeOut, out _timeout))
                    _nullableTimeOut = _timeout;
                return _nullableTimeOut;
            }
        }
    }

    public class DbHelper
    {
        private DbHelper()
        {
        }

        public static string GetConnectionString(string serverName, string instance, string dbName, string uid, string pwd)
        {
            string cnnString = DbConstants.ConnectionStringSpecific;
            if (!string.IsNullOrEmpty(instance))
                serverName = serverName + @"\" + instance;
            cnnString = string.Format(cnnString, serverName, dbName, uid, pwd);
            return cnnString;
        }

        public static string GetConnectionStringCreateCompany(string serverName, string instance, string uid, string pwd)
        {
            string cnnString = DbConstants.ConnectionStringCreateCompany;
            if (!string.IsNullOrEmpty(instance))
                serverName = serverName + @"\" + instance;
            cnnString = string.Format(cnnString, serverName, uid, pwd);
            return cnnString;
        }
    }
}
